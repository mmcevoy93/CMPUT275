
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSNAME NUMBER COMMA LPAREN RPARENstatement : expressionstatement : expression : NAME "=" expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expressionexpression : \'-\' expression %prec UMINUSexpression : NAME LPAREN RPARENexpression : NAME LPAREN expr_list RPARENexpression : LPAREN expression RPARENexpr_list : expressionexpr_list : expr_list COMMA expressionexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'+':([1,2,4,9,14,15,16,18,19,20,21,22,23,24,26,],[-15,-14,10,10,-8,10,-9,10,-11,-4,-7,-6,-5,-10,10,]),'NUMBER':([0,3,5,7,8,10,11,12,13,25,],[2,2,2,2,2,2,2,2,2,2,]),'$end':([0,1,2,4,6,14,15,16,19,20,21,22,23,24,],[-2,-15,-14,-1,0,-8,-3,-9,-11,-4,-7,-6,-5,-10,]),'RPAREN':([1,2,8,9,14,15,16,17,18,19,20,21,22,23,24,26,],[-15,-14,16,19,-8,-3,-9,24,-12,-11,-4,-7,-6,-5,-10,-13,]),'*':([1,2,4,9,14,15,16,18,19,20,21,22,23,24,26,],[-15,-14,12,12,-8,12,-9,12,-11,12,-7,-6,12,-10,12,]),'=':([1,],[7,]),'LPAREN':([0,1,3,5,7,8,10,11,12,13,25,],[3,8,3,3,3,3,3,3,3,3,3,]),'/':([1,2,4,9,14,15,16,18,19,20,21,22,23,24,26,],[-15,-14,11,11,-8,11,-9,11,-11,11,-7,-6,11,-10,11,]),'COMMA':([1,2,14,15,16,17,18,19,20,21,22,23,24,26,],[-15,-14,-8,-3,-9,25,-12,-11,-4,-7,-6,-5,-10,-13,]),'NAME':([0,3,5,7,8,10,11,12,13,25,],[1,1,1,1,1,1,1,1,1,1,]),'-':([0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,],[5,-15,-14,5,13,5,5,5,13,5,5,5,5,-8,13,-9,13,-11,-4,-7,-6,-5,-10,5,13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,3,5,7,8,10,11,12,13,25,],[4,9,14,15,18,20,21,22,23,26,]),'expr_list':([8,],[17,]),'statement':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','exprparser.py',67),
  ('statement -> <empty>','statement',0,'p_statement_empty','exprparser.py',72),
  ('expression -> NAME = expression','expression',3,'p_expression_assign','exprparser.py',77),
  ('expression -> expression + expression','expression',3,'p_expression_binop','exprparser.py',82),
  ('expression -> expression - expression','expression',3,'p_expression_binop','exprparser.py',83),
  ('expression -> expression * expression','expression',3,'p_expression_binop','exprparser.py',84),
  ('expression -> expression / expression','expression',3,'p_expression_binop','exprparser.py',85),
  ('expression -> - expression','expression',2,'p_expression_uminus','exprparser.py',90),
  ('expression -> NAME LPAREN RPAREN','expression',3,'p_fn_apply_0','exprparser.py',95),
  ('expression -> NAME LPAREN expr_list RPAREN','expression',4,'p_fn_apply','exprparser.py',100),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','exprparser.py',105),
  ('expr_list -> expression','expr_list',1,'p_expr_list_1','exprparser.py',113),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list_2','exprparser.py',118),
  ('expression -> NUMBER','expression',1,'p_expression_number','exprparser.py',126),
  ('expression -> NAME','expression',1,'p_expression_name','exprparser.py',131),
]
